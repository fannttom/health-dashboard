‚úÖ –†–ê–ú–ö–ê –ü–†–û–ï–ö–¢–ê: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Auto Export –≤ Supabase
üß© –¶–µ–ª—å:

–°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –º–µ—Ç—Ä–∏–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∏–∑ Apple Health (—á–µ—Ä–µ–∑ Auto Export) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ Supabase –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ GPT-–ø–æ–º–æ—â–Ω–∏–∫–∞.
1. –ß—Ç–æ —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ ‚úÖ

A. –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:

    ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Health Auto Export.

    ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω —ç–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫ –≤ Supabase (—á–µ—Ä–µ–∑ Rest Api).

B. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Supabase:

    ‚úÖ –°–æ–∑–¥–∞–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫. –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–≥—Ä—É–∑–∫–∏ health —Å–æ–∑–¥–∞–Ω—ã —Ç–∞–±–ª–∏—Ü—ã:

       active_energy

apple_exercise_time

apple_stand_hour

apple_stand_time

basal_energy_burned

blood_oxygen_saturation

cardio_recovery

environmental_audio_exposure

flights_climbed

heart_rate_variability

oxygen_saturation

physical_effort

pulse_data_full

respiratory_rate

resting_heart_rate

six_minute_walking_test_distance

stair_speed_down

stair_speed_up

step_count

time_in_daylight

vo2_max

walking_asymmetry_percentage

walking_double_support_percentage

walking_heart_rate_average

walking_running_distance

walking_speed

walking_step_length

–î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–≥—Ä—É–∑–∫–∏ workouts —Å–æ–∑–¥–∞–Ω—ã —Ç–∞–±–ª–∏—Ü—ã:
heart_rate_workout_data
workouts —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏:
-- –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
create table if not exists workouts (
  id uuid primary key default gen_random_uuid(),
  start timestamp not null,
  "end" timestamp not null,  -- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
  type text not null,
  source text,
  duration_min float8 not null,
  energy_kcal float8,
  steps int4
);

-- –¢–∞–±–ª–∏—Ü–∞ –ø—É–ª—å—Å–∞ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
create table if not exists heart_rate_workout_data (
  id uuid primary key default gen_random_uuid(),
  workout_id uuid not null references workouts(id) on delete cascade,
  timestamp timestamp not null,
  qty float8 not null,
  type text not null  -- 'Min', 'Max', 'Avg'
);


C. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö:

    ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è Edge Function (–Ω–∞–ø—Ä–∏–º–µ—Ä parse_pulse) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö JSON.

    ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø–æ–ª—è type, –æ–ø—Ä–µ–¥–µ–ª—è—è —Ç–∞–±–ª–∏—Ü—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–µ—Ç—Ä–∏–∫–∏.

    ‚úÖ –î–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ health —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã.

–ø–æ—Å–ª–µ–¥–Ω—è—è —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è —Ñ–∞–π–ª–∞ –ø–∞—Ä—Å–µ—Ä–∞ index.ts:
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

serve(async (req) => {
  const supabase = createClient(
    Deno.env.get("SUPABASE_URL") ?? "",
    Deno.env.get("SUPABASE_ANON_KEY") ?? ""
  );

  try {
    const { data } = await req.json();

    // 1. Health –º–µ—Ç—Ä–∏–∫–∏
    for (const metric of data.metrics || []) {
      const tableName = metric.name;

      if (tableName === "sleep_analysis") {
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–Ω–∞
        const validSleepEntries = (metric.data || [])
          .filter((entry: any) => entry.inBedStart && entry.sleepEnd)
          .map((entry: any) => ({
            start: new Date(entry.inBedStart).toISOString(),
            end: new Date(entry.sleepEnd).toISOString(),
            duration_min: (new Date(entry.sleepEnd).getTime() - new Date(entry.inBedStart).getTime()) / 60000, // –ú–∏–Ω—É—Ç—ã
            source: entry.source ?? null,
          }));

        if (validSleepEntries.length > 0) {
          const { error: sleepError } = await supabase
            .from("sleep_data")
            .insert(validSleepEntries);
          if (sleepError) console.error(`Sleep insert error:`, sleepError);
        }

        continue; // –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ sleep_analysis, –∏–¥—ë–º –¥–∞–ª—å—à–µ
      }

      // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ health-–º–µ—Ç—Ä–∏–∫
      const validEntries = (metric.data || [])
        .filter((entry: any) => entry.qty && entry.date)
        .map((entry: any) => ({
          timestamp: new Date(entry.date).toISOString(),
          qty: typeof entry.qty === "string" ? parseFloat(entry.qty) : entry.qty,
          source: entry.source ?? null,
        }));

      if (validEntries.length === 0) continue;

      const { error } = await supabase.from(tableName).insert(validEntries);
      if (error) console.error(`Insert error in ${tableName}:`, error);
    }

    // 2. Workouts
    for (const workout of data.workouts || []) {
      const start = workout.start ? new Date(workout.start) : null;
      const end = workout.end ? new Date(workout.end) : null;
      if (!start || !end) continue;

      const duration_min = (end.getTime() - start.getTime()) / 1000 / 60;

      const type = workout.name ?? "Unknown";
      const source = workout.source ?? null;

      const energy_kcal = workout.activeEnergyBurned?.qty ?? null;
      const distance_km = workout.distance?.qty ?? null;
      const steps = workout.steps ?? null;

      const { data: insertedWorkout, error: insertError } = await supabase
        .from("workouts")
        .insert([
          {
            start: start.toISOString(),
            end: end.toISOString(),
            duration_min,
            type,
            source,
            energy_kcal,
            distance_km,
            steps,
          },
        ])
        .select("id");

      if (insertError || !insertedWorkout || insertedWorkout.length === 0) {
        console.error("Workout insert error:", insertError);
        continue;
      }

      const workout_id = insertedWorkout[0].id;

      // 3. Heart rate data (Min, Avg, Max)
      for (const hr of workout.heartRateData || []) {
        const timestamp = hr.date ? new Date(hr.date).toISOString() : null;
        if (!timestamp) continue;

        const entries = [];

        if (hr.Min !== undefined) {
          entries.push({ workout_id, timestamp, qty: hr.Min, type: "Min" });
        }
        if (hr.Avg !== undefined) {
          entries.push({ workout_id, timestamp, qty: hr.Avg, type: "Avg" });
        }
        if (hr.Max !== undefined) {
          entries.push({ workout_id, timestamp, qty: hr.Max, type: "Max" });
        }

        if (entries.length > 0) {
          const { error: hrError } = await supabase
            .from("heart_rate_workout_data")
            .insert(entries);

          if (hrError) {
            console.error("Heart rate insert error:", hrError);
          }
        }
      }
    }

    return new Response(JSON.stringify({ success: true }), { status: 200 });
  } catch (err) {
    console.error("Parse error:", err);
    return new Response(JSON.stringify({ error: "Invalid JSON" }), {
      status: 400,
    });
  }
});


2. –ß—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å üîÑ

    üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Workouts: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Ö –≤ Edge Functions –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º: heart_rate_workout_data
workouts.

    üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –≤ Auto Export (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å —Ä–∞–∑–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º).

3. –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ üß≠

A. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏:

    ‚öôÔ∏è –†–∞—Å—à–∏—Ä–∏—Ç—å Edge Function: –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–µ—Ç—Ä–∏–∫.

    üß™ –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ source, unit, valueType, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.

    üóÉÔ∏è –û–±–µ—Å–ø–µ—á–∏—Ç—å –≤–µ–¥–µ–Ω–∏–µ –ª–æ–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ sync_logs –∏–ª–∏ —á–µ—Ä–µ–∑ Supabase logs).

    üì§ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç: –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (—á–∞—Å, –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è).

B. GPT-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: 
5. ü§ñ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å GPT-–ø–æ–º–æ—â–Ω–∏–∫–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–∞–∑–µ (—Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –ø–æ –¥–∞—Ç–µ, —Ç–∏–ø—É –º–µ—Ç—Ä–∏–∫–∏, –∏—Å—Ç–æ—á–Ω–∏–∫—É). 
6. üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: —Å–æ–∑–¥–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ Retool –∏–ª–∏ –≤ UI Supabase) —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.
4. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è (–±—ç–∫–ª–æ–≥) üõ†

    üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Magic Link –∏–ª–∏ OAuth, –µ—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø.

    üì≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –ø—É–ª—å—Å–∞ –Ω–∏–∂–µ –Ω–æ—Ä–º—ã).

    üß† ML-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ (–∞–Ω–∞–ª–∏–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –∏ –ø—Ä.).

   